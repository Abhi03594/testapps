namespace: gocd

rbac:
  create: true
  apiVersion: v1
  roleRef:

serviceAccount:
  create: true
  name:

podDisruptionBudget:
  enabled: true
  maxUnavailable: 1

hpa:
  enabled: true

server:
  enabled: true
  annotations:
    deployment:
      # iam.amazonaws.com/role: arn:aws:iam::xxx:role/my-custom-role
    pod:
      # iam.amazonaws.com/role: arn:aws:iam::xxx:role/my-custom-role
 
  securityContext:
    runAsUser: 1000
    runAsGroup: 0
    fsGroup: 0
 
  shouldPreconfigure: true
  preconfigureCommand:
    - "/bin/bash"
    - "/preconfigure_server.sh"
  # server.preStop - array of commands to use in the server pre-stop lifecycle hook
  # preStop:
  #  - "/bin/bash"
  #  - "/backup_and_stop.sh"
  # server.terminationGracePeriodSeconds is the optional duration in seconds the gocd server pod needs to terminate gracefully.
  # Note: SIGTERM is issued immediately after the pod deletion request is sent. If the pod doesn't terminate, k8s waits for terminationGracePeriodSeconds before issuing SIGKILL.
  # server.terminationGracePeriodSeconds: 60
  image:    
    repository: "gocd/gocd-server"
    tag: v20.8.0 
    pullPolicy: "IfNotPresent"

  resources:
    requests:
      cpu: "100m"
      memory: "500Mi"
    limits:
      cpu: "1000m"
      memory: "1Gi"

  # Sidecar containers that runs alongside GoCD server.
  # https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/
  sidecarContainers: []
  # - name: sidecar-container
  #   image: sidecar-image:latest
  #   volumeMounts:
  #     - name: goserver-vol
  #     mountPath: /godata

  # specify init containers, e.g. to prepopulate home directories etc
  initContainers: []
  #  - name: download-kubectl
  #    image: "ellerbrock/alpine-bash-curl-ssl:latest"
  #    imagePullPolicy: "IfNotPresent"
  #    volumeMounts:
  #      - name: kubectl
  #        mountPath: /download
  #    workingDir: /download
  #    command: ["/bin/bash"]
  #    args:
  #      - "-c"
  #      - 'curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x ./kubectl'

  restartPolicy: Always

  nodeSelector: {}

  affinity: {}

  tolerations: {}

  healthCheck:
    initialDelaySeconds: 90
    periodSeconds: 15
    failureThreshold: 10

  env:
    # server.env.goServerJvmOpts is a list of JVM options, which needs to be provided to the GoCD Server, typically prefixed with -D unless otherwise stated.
    # Example: "-Xmx4096mb -Dfoo=bar"
    goServerJvmOpts:
    #  server.env.extraEnvVars is the list of environment variables passed to GoCD Server
    extraEnvVars:
      - name: GOCD_PLUGIN_INSTALL_kubernetes-elastic-agents
        value: https://github.com/gocd/kubernetes-elastic-agents/releases/download/v3.4.0-196/kubernetes-elastic-agent-3.4.0-196.jar
      - name: GOCD_PLUGIN_INSTALL_docker-registry-artifact-plugin
        value: https://github.com/gocd/docker-registry-artifact-plugin/releases/download/v1.1.0-104/docker-registry-artifact-plugin-1.1.0-104.jar
  service:
    type: "LoadBalancer"
    httpPort: 8153
    nodeHttpPort:
    nodeHttpsPort:
    annotations:
      ## When using LoadBalancer service type, use the following AWS certificate from ACM
      ## https://aws.amazon.com/documentation/acm/
      # service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:eu-west-1:123456789:certificate/abc123-abc123-abc123-abc123"
      # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "https"
      # service.beta.kubernetes.io/aws-load-balancer-backend-port: "https"
    ## When using LoadBalancer service type, whitelist these source IP ranges
    ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
    # loadBalancerSourceRanges:
    #   - 192.168.1.10/32
  ingress:
    # server.ingress.enabled is the toggle to enable/disable GoCD Server Ingress
    enabled: true
    # server.ingress.hosts is used to create an Ingress record.
    # hosts:
    # - ci.example.com
    annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    tls:
    #  - secretName: ci-example-tls
    #    hosts:
    #      - ci.example.com

  persistence:
    enabled: true
    accessMode: "ReadWriteOnce"
    size: 2Gi
#    storageClass: "-"

    existingClaim:
    pvSelector:
#      matchLabels:
#        volume-type: ssd
    name:
      # server.persistence.name.dockerEntryPoint name of the volume mounted at /docker-entrypoint.d/ on the server
      dockerEntryPoint: goserver-vol
      # "" for the volume root
    subpath:
      # godata is where the config, db, plugins are stored
      godata: godata
      # homego can be used for storing and mounting secrets
      homego: homego
      # custom entrypoint scripts that should be run before starting the GoCD server inside the container.
      dockerEntryPoint: scripts
    # server.persistence.extraVolumes additional server volumes
    extraVolumes: []
    # - name: gocd-server-init-scripts
    #   configMap:
    #      name: gocd-server-init-scripts
    #      defaultMode: 0755
    # - name: github-key
    #   secret:
    #     secretName: github-key
    #     defaultMode: 0744

    # server.persistence.extraVolumeMounts additional server volumeMounts
    extraVolumeMounts: []
    # - name: github-key
    #   mountPath: /etc/config/keys/
    #   readOnly: true
    # - name: gocd-server-init-scripts
    #   mountPath: /docker-entrypoint.d/

  # server.hostAliases allows the modification of the hosts file inside a container
  hostAliases:
  # - ip: "192.168.1.10"
  #   hostnames:
  #   - "example.com"
  #   - "www.example.com"

  security:
    ssh:
      enabled: false
      secretName: gocd-server-ssh
      defaultMode:

agent:
  serviceAccount:
    reuseTopLevelServiceAccount: false
    name:

  annotations:
    deployment:
      # iam.amazonaws.com/role: arn:aws:iam::xxx:role/my-custom-role
    pod:
      # iam.amazonaws.com/role: arn:aws:iam::xxx:role/my-custom-role

  securityContext:
    runAsUser: 1000
    runAsGroup: 0
    fsGroup: 0

  replicaCount: 1
  # agent.preStop - array of command and arguments to run in the agent pre-stop lifecycle hook
  # preStop:
  #  - "/bin/bash"
  #  - "/disable_and_stop.sh"
  # agent.postStart - array of command and arguments to run in agent post-start lifecycle hook
  # postStart:
  #  - "/bin/bash"
  #  - "/agent_startup.sh"
  # agent.deployStrategy is the strategy explained in detail at https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  # agent.terminationGracePeriodSeconds is the optional duration in seconds the gocd agent pods need to terminate gracefully.
  # Note: SIGTERM is issued immediately after the pod deletion request is sent. If the pod doesn't terminate, k8s waits for terminationGracePeriodSeconds before issuing SIGKILL.
  # agent.terminationGracePeriodSeconds: 60
  deployStrategy: {}

  image:
    repository: "gocd/gocd-agent-alpine-3.9"
    tag: v20.8.0
    pullPolicy: "IfNotPresent"

  env:
    goServerUrl:
    agentAutoRegisterKey:
    agentAutoRegisterResources:
    agentAutoRegisterEnvironemnts:
    agentAutoRegisterEnvironments:
    agentAutoRegisterHostname:
    goAgentJvmOpts:
    goAgentBootstrapperArgs:
    goAgentBootstrapperJvmArgs:
    extraEnvVars:

  persistence:
    enabled: false
    accessMode: "ReadWriteOnce"
    size: 1Gi

#   storageClass: "-"

    existingClaim:
    pvSelector:
#      matchLabels:
#        app: godata-gocd-agent
    name:
      # agent.persistence.name.dockerEntryPoint name of the volume mounted at /docker-entrypoint.d/ on the agent
      dockerEntryPoint: goagent-vol
    # "" for the volume root
    subpath:
      homego: homego
      dockerEntryPoint: scripts
    # agent.persistence.extraVolumes additional agent volumes
    extraVolumes: []
    # - name: gocd-agent-init-scripts
    #   configMap:
    #      name: gocd-agent-init-scripts
    #      defaultMode: 0755
    # - name: github-key
    #   secret:
    #     secretName: github-key
    #     defaultMode: 0744

    # agent.persistence.extraVolumeMounts additional agent volumeMounts
    extraVolumeMounts: []
    # - name: github-key
    #   mountPath: /etc/config/keys/
    #   readOnly: true
    # - name: gocd-agent-init-scripts
    #   mountPath: /docker-entrypoint.d/

  # specify init containers, e.g. to prepopulate home directories etc
  initContainers: []
  #  - name: download-kubectl
  #    image: "ellerbrock/alpine-bash-curl-ssl:latest"
  #    imagePullPolicy: "IfNotPresent"
  #    volumeMounts:
  #      - name: kubectl
  #        mountPath: /download
  #    workingDir: /download
  #    command: ["/bin/bash"]
  #    args:
  #      - "-c"
  #      - 'curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x ./kubectl'

  restartPolicy: Always

  privileged: false

  healthCheck:
    enabled: false
    initialDelaySeconds: 60
    periodSeconds: 60
    failureThreshold: 60

  security:
    ssh:
      enabled: false
      secretName: gocd-agent-ssh
      defaultMode:

  resources:
    requests:
      cpu: "100m"
      memory: "500Mi"
    limits:
      cpu: "1000m"
      memory: "1Gi"

  # agent.hostAliases allows the modification of the hosts file inside a container
  hostAliases:
  # - ip: "192.168.1.10"
  #   hostnames:
  #   - "example.com"
  #   - "www.example.com"

  nodeSelector: {}
  affinity: {}
  tolerations: {}
