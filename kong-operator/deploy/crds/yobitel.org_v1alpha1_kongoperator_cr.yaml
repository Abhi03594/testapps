apiVersion: yobitel.org/v1alpha1
kind: Kongoperator
metadata:
  name: example-kongoperator
spec:
  # Default values copied from <project_dir>/helm-charts/kong/values.yaml
  
  admin:
    annotations: {}
    containerPort: 8444
    enabled: false
    ingress:
      annotations: {}
      enabled: false
      hostname: null
      path: /
    servicePort: 8444
    type: NodePort
    useTLS: true
  dblessConfig:
    config:
      _format_version: "1.1"
      services: null
    configMap: ""
  enterprise:
    enabled: false
    license_secret: you-must-create-a-kong-license-secret
    portal:
      enabled: false
      portal_auth: basic-auth
      session_conf_secret: you-must-create-a-portal-session-conf-secret
    rbac:
      admin_gui_auth: basic-auth
      admin_gui_auth_conf_secret: you-must-create-an-admin-gui-auth-conf-secret
      enabled: false
      session_conf_secret: you-must-create-an-rbac-session-conf-secret
    smtp:
      admin_emails_from: none@example.com
      admin_emails_reply_to: none@example.com
      auth:
        smtp_password_secret: you-must-create-an-smtp-password
        smtp_username: ""
      enabled: false
      portal_emails_from: none@example.com
      portal_emails_reply_to: none@example.com
      smtp_admin_emails: none@example.com
      smtp_host: smtp.example.com
      smtp_port: 587
      smtp_starttls: true
    vitals:
      enabled: true
  env:
    admin_access_log: /dev/stdout
    admin_error_log: /dev/stderr
    admin_gui_access_log: /dev/stdout
    admin_gui_error_log: /dev/stderr
    database: "off"
    nginx_worker_processes: "1"
    portal_api_access_log: /dev/stdout
    portal_api_error_log: /dev/stderr
    prefix: /kong_prefix/
    proxy_access_log: /dev/stdout
    proxy_error_log: /dev/stderr
  image:
    pullPolicy: IfNotPresent
    repository: kong
    tag: "2.0"
  ingressController:
    admissionWebhook:
      enabled: false
      failurePolicy: Fail
      port: 8080
    enabled: false
    env: {}
    image:
      repository: kong-docker-kubernetes-ingress-controller.bintray.io/kong-ingress-controller
      tag: 0.7.0
    ingressClass: kong
    installCRDs: false
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthz
        port: 10254
        scheme: HTTP
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    rbac:
      create: false
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /healthz
        port: 10254
        scheme: HTTP
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources: {}
    serviceAccount:
      create: false
      name: null
  livenessProbe:
    failureThreshold: 3
    httpGet:
      path: /status
      port: metrics
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  manager:
    annotations: {}
    externalIPs: []
    http:
      containerPort: 8002
      enabled: true
      servicePort: 8002
    ingress:
      annotations: {}
      enabled: false
      hostname: null
      path: /
    tls:
      containerPort: 8445
      enabled: true
      servicePort: 8445
    type: NodePort
  namespace: kong1
  nodeSelector: {}
  plugins: {}
  podAnnotations: {}
  podDisruptionBudget:
    enabled: true
    maxUnavailable: 50%
  podSecurityPolicy:
    enabled: false
  portal:
    annotations: {}
    externalIPs: []
    http:
      containerPort: 8003
      enabled: true
      servicePort: 8003
    ingress:
      annotations: {}
      enabled: false
      hostname: null
      path: /
    tls:
      containerPort: 8446
      enabled: true
      servicePort: 8446
    type: NodePort
  portalapi:
    annotations: {}
    externalIPs: []
    http:
      containerPort: 8004
      enabled: true
      servicePort: 8004
    ingress:
      annotations: {}
      enabled: false
      hostname: null
      path: /
    tls:
      containerPort: 8447
      enabled: true
      servicePort: 8447
    type: NodePort
  postgresql:
    enabled: true
  proxy:
    annotations: {}
    externalIPs: []
    http:
      containerPort: 8000
      enabled: true
      servicePort: 80
    ingress:
      annotations: {}
      enabled: false
      hosts: []
      path: /
    tls:
      containerPort: 8443
      enabled: true
      servicePort: 443
    type: LoadBalancer
  readinessProbe:
    failureThreshold: 3
    httpGet:
      path: /status
      port: metrics
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi
  runMigrations: true
  secretVolumes: []
  securityContext:
    runAsUser: 1000
  serviceMonitor:
    enabled: false
  tolerations: []
  updateStrategy: {}
  waitImage:
    pullPolicy: IfNotPresent
    repository: busybox
    tag: latest
  
