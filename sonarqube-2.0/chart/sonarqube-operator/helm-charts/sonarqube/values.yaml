namespace: sonarqube
replicaCount: 1

deploymentStrategy: {}

image:
  repository: sonarqube
  tag: 7.9.2-community
 
crd:
  install: true

rbac:
  create: true
  name: sonarqube-opeartor

serviceAccount:
  create: true
  name: sonarqube-operator
 
securityContext:
  fsGroup: 999

elasticsearch:
  configureNode: true
  bootstrapChecks: true

service:
  type: LoadBalancer
  externalPort: 9000
  internalPort: 9000
  labels:
  annotations: {}
 
ingress:
  enabled: false

  hosts:
    - name: sonar.organization.com

      path: /
      
  annotations: {}
  
  tls: []
  
affinity: {}

tolerations: []

nodeSelector: {}


hostAliases: []

hpa:
  enabled: true

podDisruptionBudget:
  minAvailable: 1

readinessProbe:
  initialDelaySeconds: 60
  periodSeconds: 30
  failureThreshold: 6
  
  sonarWebContext: /

livenessProbe:
  initialDelaySeconds: 60
  periodSeconds: 30
  
  sonarWebContext: /


extraEnv: {}
  


annotations: {}

sidecars:
  enabled: true
  image: yobitel/k8s-sidecar:0.1.20
  imagePullPolicy: IfNotPresent
  resources: {}


resources:
  requests:
    cpu: "50m"
    memory: "256Mi"
  limits:
    cpu: "2000m"
    memory: "4096Mi"

persistence:
  enabled: true

  annotations: {}

  storageClass: gp2
  accessMode: ReadWriteOnce
  size: 10Gi


  volumes: []

  mounts: []

plugins:
  install: []
 

  resources: {}
  

customCerts:

  enabled: false
  secretName: my-cacerts

database:
  type: "postgresql"

postgresql:

  enabled: true
  
  postgresUser: "sonarUser"
  postgresPassword: "sonarPass"
  postgresDatabase: "sonarDB"

  service:
    port: 5432

mysql:

  enabled: false
  
  mysqlUser: "sonarUser"
  mysqlPassword: "sonarPass"
  mysqlDatabase: "sonarDB"
  
  service:
    port: 3306

podLabels: {}

sonarqubeFolder: /opt/sonarqube
